FPについて
授業でソフトウェアを作る事になった！
サークルにバイトに忙しいから無限に時間は使えない
ソフトウェア制作にはどのくらい時間がかかるか考える
何から考える？　何から見積もる？
仕様が書かれた資料のページ数？
大雑把な目安くらいにはできるかもしれないけど、参考にするには少し心もとない。
同じ課題を経験した先輩から聞く？
確かに目安にはなるけど、先輩がいないとどうしようもないし、人によってばらつきが大きい。
先輩が自分よりもずっとずっとハイレベルなプログラマだったら目も当てられない。
じゃあ、あるいはそのソフトウェアが持ってる機能とか？
どんな機能があるのか。データの登録だったり検索だったり、あるいは印刷だったり
その機能はどのくらい複雑なのか。
データを登録する機能一つ取ってみても、扱うデータの数によって作る大変さは変わる
データベースだってそう。たくさんのデータを扱えば扱う程複雑になっていくし作るのも大変になる。
そんな、ソフトウェアの中身、作るべき機能を洗い出していけば、どのくらい時間がかかるかはなんとなく分かると思う。
料理を作るのと同じとも考えられる。
夕飯を作る時、どのくらい手間がかかるかをレシピのページ数から考えはしないだろう。
どんな料理を作るのか。その料理はどんな材料を使っているのか。
具材が多ければ、それだけ準備にも時間がかかるだろう。
そんな感じ。
今回紹介するファンクションポイント、略してFPは、今説明した見積り方をもっと形式化した物なんだ。
ソフトウェアにおける各機能の複雑さ、手間を計測する事で全体の開発規模を導き出す。
そんな素敵な見積り手法を、これから教えようと思う。
利点や概要だけでも覚えて帰ってくれると嬉しいな。
じゃあ、早速始めるとしようか。
FPは開発規模の尺度の一つだ。1FPとか30FPとかそういう表現の仕方をする。
開発規模というのは、言葉通りソフトウェアの規模の事で、これを元に工数、どのくらいの人数が必要かを割り出すんだ。
仮に100FPの機能をこなすために3人が一ヶ月働かないといけない、つまり3人月かかる場合、600FPのソフトウェアには18人月必要と分かる。
そうして見積もられた工数から予算が見積もられる。1人を一ヶ月働かせるために30万円必要だから18人月なら540万円必要。だから今回のソフトウェアは540万円で制作します、みたいにね。
そんなわけで、ソフトウェアの予算を見積もるためにFPは活用されるんだ。
主な利点は、開発言語に依存しない事とプログラムに詳しくない方からも見積りに納得が得られやすい事。
まず、開発言語に依存しない事について。
FPは各機能の複雑さを見積もる手法であり、あくまで計測するのはソフトウェアの機能だ。
故に、そのソフトウェアがどの言語で開発されても関係がない。
何で開発するかを気にせずに見積もる事ができるのが大きな利点だ。
次に、見積もりに納得が得られやすい事。
FPは機能の複雑さを見積もるわけだけど、この機能というのはユーザから見える機能のみを指す。
つまり、内部でのややこしい処理は無視して、ユーザが目にする機能のみを見る事ができる。
粒度で言えば「図書館の図書検索機能ではタイトルや著者名を入力すればその条件に当てはまる本の詳細が表示されます」くらい。
プログラムに詳しくないお客様でもなんとなくは分かるような機能を元に見積りを行うから、他の手法と比べて見積りの根拠への納得がされやすい。
たとえば他の見積り手法として、ソースコードからの見積り、つまり「何行あるからいくら」といった見積り手法があるけど、
お客さんからすればソースコードなんて見せられてもよく分からないから「どうしてその行数になるのか」「行数水増ししてないか」といった風に不安になってしまう。
でも今回紹介するFPなら「お客様も利用するであろうこの機能はこういった項目を扱っている処理なのでこのくらい作るのに手間がかかります」といった風にお客様でも理解できるレベルで見積もりの根拠を話す事ができる。
「２００行だから３００万円ね」と突っぱねられるよりもずっと良心的だ。
そんなわけで、FPには活用する利点がある。
根拠のある見積もりが必要になったら是非一度使ってみてほしいね。
じゃあ次はFPの計測方法をお話しするよ。
FPは大きく分けて二つの機能を計測するんだ。
1つはDF。データのまとまり、分かりやすく言えばデータベースの類だ。
たとえば図書館のデータベースには、図書の情報や利用者の情報が登録されていると思うけど、この図書情報や利用者情報が、DFに当てはまるんだ。
まだピンとこない人もいるかもしれないけど、今のところは後で出てくるTFで更新されたり参照されたりするものだと思ってもらえればいい。
もう一つはTF。こっちは処理に相当する機能だ。
データの登録や検索、印刷なんかもTFの一種だ。
何らかの項目を入力して、何らかの項目が出力されるものと考えてもらえると嬉しい。
さっきDFについて話した時にも言ったけど、TFはDFを更新したり参照したりする。
新しい商品をデータベースに登録したり、図書情報を参照して検索をかけたりする。
そんなわけで、FPにおいてはデータと処理の二つを計測するんだ。
それぞれの計測に必要な要素も伝えておく。
DFの計測のためには、項目数と種類が必要だ。
項目数は持っているデータ項目の数。TFから更新されたり参照されたりする項目数の事だ。
種類は簡単に言えば更新されるか否か。そのソフトウェアにおいて中身が変更されないのであれば更新されないものと考えていい。
TFの計測のためには、入出力項目数と関わるDFの数、そして種類が必要だ。
入出力項目数は文字通り入力項目と出力項目の数だ。
この時、入力と出力で重複があった場合は片方のみ数えるから気をつけてほしい。
次に関わるDF。これはそのTFにおいて更新したり参照したりするDFの数。
たくさんのDFと関わりがあればあるほど作るのに手間がかかるためだ。
最後に種類。これは更新か出力か照会か。
更新はDFを更新する処理。
出力と照会はどちらもDFを更新しない処理だ。
データに対し何らかの演算を行った上で出力する処理を出力、演算を行わずそのままデータを出力する処理が照会。
生徒の成績をそのまま表示すれば照会処理で、生徒の成績から平均点を計算し表示すれば出力処理といった具合だ。
これらの情報を元に、DFとTFのFPが計測できるようになっている。
実際のシステムを見ながら、計測の具体的な流れを見てもらおう。

